dnf --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos
dnf distro-sync
reboot

ssh-keygen -t rsa
ssh-copy-id 192.168.5.73
ssh 192.168.5.73
copy cat ~/.ssh/id_rsa.pub  to ~/.ssh/authorized_keys
and then ssh as root

 ansible prod -m setup


 touch roles/{r1,r2}/{tasks,handlers}/main.yml

 ansible-playbook mproj.yml
 ansible-playbook mproj.yml  -e
 ansible all -i 192.168.5.73, -m file -a "path=/file1 state=absent"
 ansible all -i 192.168.5.73, -m yum -a "name=openssh state=latest"
 ansible-playbook mproj.yml -e "x=no"

 galera mariadb IP
 centos-02 192.168.5.42
 centos-03 192.168.5.46
 ubuntu http://192.168.5.122/


-----------
sudo dnf install MariaDB-server
sudo systemctl start mariadb
firewall-cmd --permanent --zone=public --add-port=3306/tcp
firewall-cmd --permanent --zone=public --add-port=4444/tcp
firewall-cmd --permanent --zone=public --add-port=4567/tcp
firewall-cmd --permanent --zone=public --add-port=4567/udp
firewall-cmd --permanent --zone=public --add-port=4568/tcp
firewall-cmd --reload
firewall-cmd --list-all
setenforce 0

/etc/my.cnf.d/galera.cnf
[mysqld]
binlog_format=ROW
default_storage_engine=innodb
innodb_autoinc_lock_mode=2
bind-address=0.0.0.0

#Galera provider config
wsrep_on=ON
wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so

#galera cluster config
wsrep_cluster_name="test_cluster"
wsrep_cluster_address="gcomm://192.168.5.73,192.168.5.234"

#galera sync
wsrep_sst_method=rsync

#galera node config
wsrep_node_name="db2.mydomain.org"
wsrep_node_address="192.168.5.234"
setsebool -P nis_enabled 1
systemctl stop mariadb
/var/lib/mysql/grastate.dat file and change safe_to_bootstrap to 1.
galera_new_cluster
 systemctl start mariadb
 mysql -uroot
 CREATE USER 'appuser'@'%' IDENTIFIED BY 'appuser';
 GRANT ALL PRIVILEGES ON *.* TO 'appuser'@'%';
 flush privileges;
 SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size';
 CREATE database my_db;


 ---------------
apt-get install nginx
systemctl start nginx
systemctl enable nginx
apt-get install python python-setuptools python-dev build-essential python-pip python-mysqldb
apt-get install python-dev default-libmysqlclient-dev libssl-dev
pip install flask flask-mysql uwsgi

-------------
 CREATE database employee_db;
 show databases;
 use employee_db;
 SHOW TABLES;
https://github.com/Dos2009/AAC-Lab1

  mysql -uroot employee_db < employee_db.sql

  SELECT * FROM employees;
------
web server
cp app.service /etc/systemd/system/
vi /etc/systemd/system/app.service
systemctl daemon-reload
systemctl status app
systemctl enable app
systemctl start app
systemctl status app
/usr/local/bin/uwsgi --ini app.ini
pip install pip --upgrade
pip3 install pip --upgrade

--------
cp app /etc/nginx/sites-available/
ln -s /etc/nginx/sites-available/app /etc/nginx/sites-enabled/

-------
run ansible as a different user
ansible-playbook mplay.yml -u centos -k

inside the mplay:
      become: yes
      become_user: centos